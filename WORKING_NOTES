	Building  Buildroot for QEMU emulation.				      |
	[built for x86_64 using the defconfig for x86_64-qemu plat.]	      |
								              |
	author: Nikos Mouzakitis, 2021					      |
-------------------------------------------------------------------------------
0)	General script to invoke QEMU with Buildroot linux as a guest:

	**********************************************************************
	**********************************************************************

	#   bzImage and rootfs.ext2 are the generated files after a succesful
	#   buildroot compilation for qemu_x86_64_defconfig and can be found 
	#   in the folder output/images.


	#!/bin/sh

	qemu-system-x86_64 -M pc \
		-smp 2 \
		--enable-kvm \
		-kernel bzImage \
		-drive file=rootfs.ext2,if=virtio,format=raw \
		-append "rootwait root=/dev/vda console=tty1 console=ttyS0" \
		-nographic \
		-nic user,model=virtio,hostfwd=tcp::22222-:22 \

	**********************************************************************
	**********************************************************************
1)	RECOMPILATION OF LINUX SOURCES	

	after having in the directory output/images 
	ready for run our bzImage and rootfs, 
	we can alter the linux sources and recompile by 
	giving the command "make linux-rebuild"
	
	**********************************************************************
	**********************************************************************
2)      SSH FROM HOST TO GUEST QEMU

	Compile Buildroot again and enable, openssh from 
	Target Packages -> Network applications.
	
	Because Busybox permits the root to ssh, a creation of a new user
	takes place in the following step.
	Create a file called user_tables_ssh.txt and pass its
	path on make menuconfig at "System configuration" on
	() 'path to user tables'.
	Contents of the file creating a new user called foo, with password: bar.

	file "user_tables_ssh"
	foo -1 foo -1 =bar /home/foo /bin/sh - no_comment

	After that using hostforwarding
	(hostfwd=tcp::22222-:22) [parameter on qemu]
	ssh to the host using
	'ssh foo@localhost -p 22222' command.
	
	**********************************************************************
	**********************************************************************
3)	CROSS-COMPILE USER-SPACE PROGRAM AND SCP TO THE GUEST

	Under apps directory can be found an example of how to 
	create/cross-compile a sample userspace program and 
	copy it to the guest usng scp with host port forwarding.
	Program is cross compiled using the toolchain generated
	by Buildroot.

	**********************************************************************
	**********************************************************************
4)	CROSS-COMPILE LINUX KERNEL MODULES

	sample program found under apps/sample_lkm/
	
	**********************************************************************
	**********************************************************************
5)	System Management Mode on QEMU


	a) Triggering an SMI from a userspace program:

	apps/system-management-interrupts/trigger-userspace-smi: contains a sample program
	found https://scumjr.github.io/2016/01/04/playing-with-smm-and-qemu/
	triggering a SMI from userspace.
	
	Requirement: compile edk2 OVMF for virtual machines, with SMM enabled (compile option -D SMM_REQUIRE)
	and use the following qemu script for the x86_64 architecture.

	#!/bin/bash

	cp edk2/Build/OvmfX64/DEBUG_GCC48/FV/OVMF* ovmf-edk2/

	machine="q35,smm=on"\

	#run the virtual machine,with SMM enabled using the firmware created by the EDK2 codebase.
	qemu-system-x86_64 \
		-M $machine --enable-kvm  -m 4096 \
		-smp 2 \
		-bios ovmf-edk2/OVMF.fd \
		-drive file=output/images/rootfs.ext2,if=virtio,format=raw \
		-kernel output/images/bzImage \
		-append "rootwait root=/dev/vda console=tty1 console=ttyS0" \
		-global driver=cfi.pflash01,property=secure,value=on \
		-drive if=pflash,format=raw,unit=0,file=ovmf-edk2/OVMF_CODE.fd,readonly=on \
		-drive if=pflash,format=raw,unit=1,file=ovmf-edk2/OVMF_VARS.fd \
		-global ICH9-LPC.disable_s3=1 \
		-nic user,model=virtio,hostfwd=tcp::22222-:22 \
		-chardev stdio,id=deb \
		-device isa-debugcon,iobase=0x402,chardev=deb \



	b) Triggering an SMI using an APIC interrupt from 
	   a kernel module by writing on the specific ICR 
	   register on the x86 architecture.

	   Module can be found under apps/system-management-interrupts/smi-kernel-apic
	   Triggers an SMI by writting the ICR register of the APIC.
	   More info in the Intel Manual.

	**********************************************************************
	**********************************************************************
6)	MEASUREMENT OF MACHINE CYCLES

	Program which is measuring the machine cycles while a dummy function
	executes.
	Program can be found in directory with path: apps/machine-cycles-measurement.



